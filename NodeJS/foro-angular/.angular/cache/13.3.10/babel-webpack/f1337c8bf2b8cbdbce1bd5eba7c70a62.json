{"ast":null,"code":"/*\nLanguage: Rust\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\nWebsite: https://www.rust-lang.org\nCategory: common, system\n*/\n\n/** @type LanguageFn */\nfunction rust(hljs) {\n  const regex = hljs.regex;\n  const FUNCTION_INVOKE = {\n    className: \"title.function.invoke\",\n    relevance: 0,\n    begin: regex.concat(/\\b/, /(?!let\\b)/, hljs.IDENT_RE, regex.lookahead(/\\s*\\(/))\n  };\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\n  const KEYWORDS = [\"abstract\", \"as\", \"async\", \"await\", \"become\", \"box\", \"break\", \"const\", \"continue\", \"crate\", \"do\", \"dyn\", \"else\", \"enum\", \"extern\", \"false\", \"final\", \"fn\", \"for\", \"if\", \"impl\", \"in\", \"let\", \"loop\", \"macro\", \"match\", \"mod\", \"move\", \"mut\", \"override\", \"priv\", \"pub\", \"ref\", \"return\", \"self\", \"Self\", \"static\", \"struct\", \"super\", \"trait\", \"true\", \"try\", \"type\", \"typeof\", \"unsafe\", \"unsized\", \"use\", \"virtual\", \"where\", \"while\", \"yield\"];\n  const LITERALS = [\"true\", \"false\", \"Some\", \"None\", \"Ok\", \"Err\"];\n  const BUILTINS = [// functions\n  'drop ', // traits\n  \"Copy\", \"Send\", \"Sized\", \"Sync\", \"Drop\", \"Fn\", \"FnMut\", \"FnOnce\", \"ToOwned\", \"Clone\", \"Debug\", \"PartialEq\", \"PartialOrd\", \"Eq\", \"Ord\", \"AsRef\", \"AsMut\", \"Into\", \"From\", \"Default\", \"Iterator\", \"Extend\", \"IntoIterator\", \"DoubleEndedIterator\", \"ExactSizeIterator\", \"SliceConcatExt\", \"ToString\", // macros\n  \"assert!\", \"assert_eq!\", \"bitflags!\", \"bytes!\", \"cfg!\", \"col!\", \"concat!\", \"concat_idents!\", \"debug_assert!\", \"debug_assert_eq!\", \"env!\", \"panic!\", \"file!\", \"format!\", \"format_args!\", \"include_bytes!\", \"include_str!\", \"line!\", \"local_data_key!\", \"module_path!\", \"option_env!\", \"print!\", \"println!\", \"select!\", \"stringify!\", \"try!\", \"unimplemented!\", \"unreachable!\", \"vec!\", \"write!\", \"writeln!\", \"macro_rules!\", \"assert_ne!\", \"debug_assert_ne!\"];\n  const TYPES = [\"i8\", \"i16\", \"i32\", \"i64\", \"i128\", \"isize\", \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\", \"f32\", \"f64\", \"str\", \"char\", \"bool\", \"Box\", \"Option\", \"Result\", \"String\", \"Vec\"];\n  return {\n    name: 'Rust',\n    aliases: ['rs'],\n    keywords: {\n      $pattern: hljs.IDENT_RE + '!?',\n      type: TYPES,\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      built_in: BUILTINS\n    },\n    illegal: '</',\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.COMMENT('/\\\\*', '\\\\*/', {\n      contains: ['self']\n    }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      begin: /b?\"/,\n      illegal: null\n    }), {\n      className: 'string',\n      variants: [{\n        begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/\n      }, {\n        begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/\n      }]\n    }, {\n      className: 'symbol',\n      begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n    }, {\n      className: 'number',\n      variants: [{\n        begin: '\\\\b0b([01_]+)' + NUMBER_SUFFIX\n      }, {\n        begin: '\\\\b0o([0-7_]+)' + NUMBER_SUFFIX\n      }, {\n        begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX\n      }, {\n        begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' + NUMBER_SUFFIX\n      }],\n      relevance: 0\n    }, {\n      begin: [/fn/, /\\s+/, hljs.UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"title.function\"\n      }\n    }, {\n      className: 'meta',\n      begin: '#!?\\\\[',\n      end: '\\\\]',\n      contains: [{\n        className: 'string',\n        begin: /\"/,\n        end: /\"/\n      }]\n    }, {\n      begin: [/let/, /\\s+/, /(?:mut\\s+)?/, hljs.UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"keyword\",\n        4: \"variable\"\n      }\n    }, // must come before impl/for rule later\n    {\n      begin: [/for/, /\\s+/, hljs.UNDERSCORE_IDENT_RE, /\\s+/, /in/],\n      className: {\n        1: \"keyword\",\n        3: \"variable\",\n        5: \"keyword\"\n      }\n    }, {\n      begin: [/type/, /\\s+/, hljs.UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"title.class\"\n      }\n    }, {\n      begin: [/(?:trait|enum|struct|union|impl|for)/, /\\s+/, hljs.UNDERSCORE_IDENT_RE],\n      className: {\n        1: \"keyword\",\n        3: \"title.class\"\n      }\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: {\n        keyword: \"Self\",\n        built_in: BUILTINS,\n        type: TYPES\n      }\n    }, {\n      className: \"punctuation\",\n      begin: '->'\n    }, FUNCTION_INVOKE]\n  };\n}\n\nmodule.exports = rust;","map":{"version":3,"sources":["C:/xampp/htdocs/Full-Stack/NodeJS/foro-angular/node_modules/highlight.js/lib/languages/rust.js"],"names":["rust","hljs","regex","FUNCTION_INVOKE","className","relevance","begin","concat","IDENT_RE","lookahead","NUMBER_SUFFIX","KEYWORDS","LITERALS","BUILTINS","TYPES","name","aliases","keywords","$pattern","type","keyword","literal","built_in","illegal","contains","C_LINE_COMMENT_MODE","COMMENT","inherit","QUOTE_STRING_MODE","variants","UNDERSCORE_IDENT_RE","end","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAClB,QAAMC,KAAK,GAAGD,IAAI,CAACC,KAAnB;AACA,QAAMC,eAAe,GAAG;AACtBC,IAAAA,SAAS,EAAE,uBADW;AAEtBC,IAAAA,SAAS,EAAE,CAFW;AAGtBC,IAAAA,KAAK,EAAEJ,KAAK,CAACK,MAAN,CACL,IADK,EAEL,WAFK,EAGLN,IAAI,CAACO,QAHA,EAILN,KAAK,CAACO,SAAN,CAAgB,OAAhB,CAJK;AAHe,GAAxB;AASA,QAAMC,aAAa,GAAG,wCAAtB;AACA,QAAMC,QAAQ,GAAG,CACf,UADe,EAEf,IAFe,EAGf,OAHe,EAIf,OAJe,EAKf,QALe,EAMf,KANe,EAOf,OAPe,EAQf,OARe,EASf,UATe,EAUf,OAVe,EAWf,IAXe,EAYf,KAZe,EAaf,MAbe,EAcf,MAde,EAef,QAfe,EAgBf,OAhBe,EAiBf,OAjBe,EAkBf,IAlBe,EAmBf,KAnBe,EAoBf,IApBe,EAqBf,MArBe,EAsBf,IAtBe,EAuBf,KAvBe,EAwBf,MAxBe,EAyBf,OAzBe,EA0Bf,OA1Be,EA2Bf,KA3Be,EA4Bf,MA5Be,EA6Bf,KA7Be,EA8Bf,UA9Be,EA+Bf,MA/Be,EAgCf,KAhCe,EAiCf,KAjCe,EAkCf,QAlCe,EAmCf,MAnCe,EAoCf,MApCe,EAqCf,QArCe,EAsCf,QAtCe,EAuCf,OAvCe,EAwCf,OAxCe,EAyCf,MAzCe,EA0Cf,KA1Ce,EA2Cf,MA3Ce,EA4Cf,QA5Ce,EA6Cf,QA7Ce,EA8Cf,SA9Ce,EA+Cf,KA/Ce,EAgDf,SAhDe,EAiDf,OAjDe,EAkDf,OAlDe,EAmDf,OAnDe,CAAjB;AAqDA,QAAMC,QAAQ,GAAG,CACf,MADe,EAEf,OAFe,EAGf,MAHe,EAIf,MAJe,EAKf,IALe,EAMf,KANe,CAAjB;AAQA,QAAMC,QAAQ,GAAG,CACf;AACA,SAFe,EAGf;AACA,QAJe,EAKf,MALe,EAMf,OANe,EAOf,MAPe,EAQf,MARe,EASf,IATe,EAUf,OAVe,EAWf,QAXe,EAYf,SAZe,EAaf,OAbe,EAcf,OAde,EAef,WAfe,EAgBf,YAhBe,EAiBf,IAjBe,EAkBf,KAlBe,EAmBf,OAnBe,EAoBf,OApBe,EAqBf,MArBe,EAsBf,MAtBe,EAuBf,SAvBe,EAwBf,UAxBe,EAyBf,QAzBe,EA0Bf,cA1Be,EA2Bf,qBA3Be,EA4Bf,mBA5Be,EA6Bf,gBA7Be,EA8Bf,UA9Be,EA+Bf;AACA,WAhCe,EAiCf,YAjCe,EAkCf,WAlCe,EAmCf,QAnCe,EAoCf,MApCe,EAqCf,MArCe,EAsCf,SAtCe,EAuCf,gBAvCe,EAwCf,eAxCe,EAyCf,kBAzCe,EA0Cf,MA1Ce,EA2Cf,QA3Ce,EA4Cf,OA5Ce,EA6Cf,SA7Ce,EA8Cf,cA9Ce,EA+Cf,gBA/Ce,EAgDf,cAhDe,EAiDf,OAjDe,EAkDf,iBAlDe,EAmDf,cAnDe,EAoDf,aApDe,EAqDf,QArDe,EAsDf,UAtDe,EAuDf,SAvDe,EAwDf,YAxDe,EAyDf,MAzDe,EA0Df,gBA1De,EA2Df,cA3De,EA4Df,MA5De,EA6Df,QA7De,EA8Df,UA9De,EA+Df,cA/De,EAgEf,YAhEe,EAiEf,kBAjEe,CAAjB;AAmEA,QAAMC,KAAK,GAAG,CACZ,IADY,EAEZ,KAFY,EAGZ,KAHY,EAIZ,KAJY,EAKZ,MALY,EAMZ,OANY,EAOZ,IAPY,EAQZ,KARY,EASZ,KATY,EAUZ,KAVY,EAWZ,MAXY,EAYZ,OAZY,EAaZ,KAbY,EAcZ,KAdY,EAeZ,KAfY,EAgBZ,MAhBY,EAiBZ,MAjBY,EAkBZ,KAlBY,EAmBZ,QAnBY,EAoBZ,QApBY,EAqBZ,QArBY,EAsBZ,KAtBY,CAAd;AAwBA,SAAO;AACLC,IAAAA,IAAI,EAAE,MADD;AAELC,IAAAA,OAAO,EAAE,CAAE,IAAF,CAFJ;AAGLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,QAAQ,EAAEjB,IAAI,CAACO,QAAL,GAAgB,IADlB;AAERW,MAAAA,IAAI,EAAEL,KAFE;AAGRM,MAAAA,OAAO,EAAET,QAHD;AAIRU,MAAAA,OAAO,EAAET,QAJD;AAKRU,MAAAA,QAAQ,EAAET;AALF,KAHL;AAULU,IAAAA,OAAO,EAAE,IAVJ;AAWLC,IAAAA,QAAQ,EAAE,CACRvB,IAAI,CAACwB,mBADG,EAERxB,IAAI,CAACyB,OAAL,CAAa,MAAb,EAAqB,MAArB,EAA6B;AAAEF,MAAAA,QAAQ,EAAE,CAAE,MAAF;AAAZ,KAA7B,CAFQ,EAGRvB,IAAI,CAAC0B,OAAL,CAAa1B,IAAI,CAAC2B,iBAAlB,EAAqC;AACnCtB,MAAAA,KAAK,EAAE,KAD4B;AAEnCiB,MAAAA,OAAO,EAAE;AAF0B,KAArC,CAHQ,EAOR;AACEnB,MAAAA,SAAS,EAAE,QADb;AAEEyB,MAAAA,QAAQ,EAAE,CACR;AAAEvB,QAAAA,KAAK,EAAE;AAAT,OADQ,EAER;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAFQ;AAFZ,KAPQ,EAcR;AACEF,MAAAA,SAAS,EAAE,QADb;AAEEE,MAAAA,KAAK,EAAE;AAFT,KAdQ,EAkBR;AACEF,MAAAA,SAAS,EAAE,QADb;AAEEyB,MAAAA,QAAQ,EAAE,CACR;AAAEvB,QAAAA,KAAK,EAAE,kBAAkBI;AAA3B,OADQ,EAER;AAAEJ,QAAAA,KAAK,EAAE,mBAAmBI;AAA5B,OAFQ,EAGR;AAAEJ,QAAAA,KAAK,EAAE,yBAAyBI;AAAlC,OAHQ,EAIR;AAAEJ,QAAAA,KAAK,EAAE,oDACEI;AADX,OAJQ,CAFZ;AASEL,MAAAA,SAAS,EAAE;AATb,KAlBQ,EA6BR;AACEC,MAAAA,KAAK,EAAE,CACL,IADK,EAEL,KAFK,EAGLL,IAAI,CAAC6B,mBAHA,CADT;AAME1B,MAAAA,SAAS,EAAE;AACT,WAAG,SADM;AAET,WAAG;AAFM;AANb,KA7BQ,EAwCR;AACEA,MAAAA,SAAS,EAAE,MADb;AAEEE,MAAAA,KAAK,EAAE,QAFT;AAGEyB,MAAAA,GAAG,EAAE,KAHP;AAIEP,MAAAA,QAAQ,EAAE,CACR;AACEpB,QAAAA,SAAS,EAAE,QADb;AAEEE,QAAAA,KAAK,EAAE,GAFT;AAGEyB,QAAAA,GAAG,EAAE;AAHP,OADQ;AAJZ,KAxCQ,EAoDR;AACEzB,MAAAA,KAAK,EAAE,CACL,KADK,EAEL,KAFK,EAGL,aAHK,EAILL,IAAI,CAAC6B,mBAJA,CADT;AAOE1B,MAAAA,SAAS,EAAE;AACT,WAAG,SADM;AAET,WAAG,SAFM;AAGT,WAAG;AAHM;AAPb,KApDQ,EAiER;AACA;AACEE,MAAAA,KAAK,EAAE,CACL,KADK,EAEL,KAFK,EAGLL,IAAI,CAAC6B,mBAHA,EAIL,KAJK,EAKL,IALK,CADT;AAQE1B,MAAAA,SAAS,EAAE;AACT,WAAG,SADM;AAET,WAAG,UAFM;AAGT,WAAG;AAHM;AARb,KAlEQ,EAgFR;AACEE,MAAAA,KAAK,EAAE,CACL,MADK,EAEL,KAFK,EAGLL,IAAI,CAAC6B,mBAHA,CADT;AAME1B,MAAAA,SAAS,EAAE;AACT,WAAG,SADM;AAET,WAAG;AAFM;AANb,KAhFQ,EA2FR;AACEE,MAAAA,KAAK,EAAE,CACL,sCADK,EAEL,KAFK,EAGLL,IAAI,CAAC6B,mBAHA,CADT;AAME1B,MAAAA,SAAS,EAAE;AACT,WAAG,SADM;AAET,WAAG;AAFM;AANb,KA3FQ,EAsGR;AACEE,MAAAA,KAAK,EAAEL,IAAI,CAACO,QAAL,GAAgB,IADzB;AAEES,MAAAA,QAAQ,EAAE;AACRG,QAAAA,OAAO,EAAE,MADD;AAERE,QAAAA,QAAQ,EAAET,QAFF;AAGRM,QAAAA,IAAI,EAAEL;AAHE;AAFZ,KAtGQ,EA8GR;AACEV,MAAAA,SAAS,EAAE,aADb;AAEEE,MAAAA,KAAK,EAAE;AAFT,KA9GQ,EAkHRH,eAlHQ;AAXL,GAAP;AAgID;;AAED6B,MAAM,CAACC,OAAP,GAAiBjC,IAAjB","sourcesContent":["/*\nLanguage: Rust\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\nWebsite: https://www.rust-lang.org\nCategory: common, system\n*/\n\n/** @type LanguageFn */\nfunction rust(hljs) {\n  const regex = hljs.regex;\n  const FUNCTION_INVOKE = {\n    className: \"title.function.invoke\",\n    relevance: 0,\n    begin: regex.concat(\n      /\\b/,\n      /(?!let\\b)/,\n      hljs.IDENT_RE,\n      regex.lookahead(/\\s*\\(/))\n  };\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\n  const KEYWORDS = [\n    \"abstract\",\n    \"as\",\n    \"async\",\n    \"await\",\n    \"become\",\n    \"box\",\n    \"break\",\n    \"const\",\n    \"continue\",\n    \"crate\",\n    \"do\",\n    \"dyn\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"false\",\n    \"final\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"impl\",\n    \"in\",\n    \"let\",\n    \"loop\",\n    \"macro\",\n    \"match\",\n    \"mod\",\n    \"move\",\n    \"mut\",\n    \"override\",\n    \"priv\",\n    \"pub\",\n    \"ref\",\n    \"return\",\n    \"self\",\n    \"Self\",\n    \"static\",\n    \"struct\",\n    \"super\",\n    \"trait\",\n    \"true\",\n    \"try\",\n    \"type\",\n    \"typeof\",\n    \"unsafe\",\n    \"unsized\",\n    \"use\",\n    \"virtual\",\n    \"where\",\n    \"while\",\n    \"yield\"\n  ];\n  const LITERALS = [\n    \"true\",\n    \"false\",\n    \"Some\",\n    \"None\",\n    \"Ok\",\n    \"Err\"\n  ];\n  const BUILTINS = [\n    // functions\n    'drop ',\n    // traits\n    \"Copy\",\n    \"Send\",\n    \"Sized\",\n    \"Sync\",\n    \"Drop\",\n    \"Fn\",\n    \"FnMut\",\n    \"FnOnce\",\n    \"ToOwned\",\n    \"Clone\",\n    \"Debug\",\n    \"PartialEq\",\n    \"PartialOrd\",\n    \"Eq\",\n    \"Ord\",\n    \"AsRef\",\n    \"AsMut\",\n    \"Into\",\n    \"From\",\n    \"Default\",\n    \"Iterator\",\n    \"Extend\",\n    \"IntoIterator\",\n    \"DoubleEndedIterator\",\n    \"ExactSizeIterator\",\n    \"SliceConcatExt\",\n    \"ToString\",\n    // macros\n    \"assert!\",\n    \"assert_eq!\",\n    \"bitflags!\",\n    \"bytes!\",\n    \"cfg!\",\n    \"col!\",\n    \"concat!\",\n    \"concat_idents!\",\n    \"debug_assert!\",\n    \"debug_assert_eq!\",\n    \"env!\",\n    \"panic!\",\n    \"file!\",\n    \"format!\",\n    \"format_args!\",\n    \"include_bytes!\",\n    \"include_str!\",\n    \"line!\",\n    \"local_data_key!\",\n    \"module_path!\",\n    \"option_env!\",\n    \"print!\",\n    \"println!\",\n    \"select!\",\n    \"stringify!\",\n    \"try!\",\n    \"unimplemented!\",\n    \"unreachable!\",\n    \"vec!\",\n    \"write!\",\n    \"writeln!\",\n    \"macro_rules!\",\n    \"assert_ne!\",\n    \"debug_assert_ne!\"\n  ];\n  const TYPES = [\n    \"i8\",\n    \"i16\",\n    \"i32\",\n    \"i64\",\n    \"i128\",\n    \"isize\",\n    \"u8\",\n    \"u16\",\n    \"u32\",\n    \"u64\",\n    \"u128\",\n    \"usize\",\n    \"f32\",\n    \"f64\",\n    \"str\",\n    \"char\",\n    \"bool\",\n    \"Box\",\n    \"Option\",\n    \"Result\",\n    \"String\",\n    \"Vec\"\n  ];\n  return {\n    name: 'Rust',\n    aliases: [ 'rs' ],\n    keywords: {\n      $pattern: hljs.IDENT_RE + '!?',\n      type: TYPES,\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      built_in: BUILTINS\n    },\n    illegal: '</',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT('/\\\\*', '\\\\*/', { contains: [ 'self' ] }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        begin: /b?\"/,\n        illegal: null\n      }),\n      {\n        className: 'string',\n        variants: [\n          { begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/ },\n          { begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/ }\n        ]\n      },\n      {\n        className: 'symbol',\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n      },\n      {\n        className: 'number',\n        variants: [\n          { begin: '\\\\b0b([01_]+)' + NUMBER_SUFFIX },\n          { begin: '\\\\b0o([0-7_]+)' + NUMBER_SUFFIX },\n          { begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX },\n          { begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)'\n                   + NUMBER_SUFFIX }\n        ],\n        relevance: 0\n      },\n      {\n        begin: [\n          /fn/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"title.function\"\n        }\n      },\n      {\n        className: 'meta',\n        begin: '#!?\\\\[',\n        end: '\\\\]',\n        contains: [\n          {\n            className: 'string',\n            begin: /\"/,\n            end: /\"/\n          }\n        ]\n      },\n      {\n        begin: [\n          /let/,\n          /\\s+/,\n          /(?:mut\\s+)?/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"keyword\",\n          4: \"variable\"\n        }\n      },\n      // must come before impl/for rule later\n      {\n        begin: [\n          /for/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE,\n          /\\s+/,\n          /in/\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"variable\",\n          5: \"keyword\"\n        }\n      },\n      {\n        begin: [\n          /type/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"title.class\"\n        }\n      },\n      {\n        begin: [\n          /(?:trait|enum|struct|union|impl|for)/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"title.class\"\n        }\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: {\n          keyword: \"Self\",\n          built_in: BUILTINS,\n          type: TYPES\n        }\n      },\n      {\n        className: \"punctuation\",\n        begin: '->'\n      },\n      FUNCTION_INVOKE\n    ]\n  };\n}\n\nmodule.exports = rust;\n"]},"metadata":{},"sourceType":"script"}