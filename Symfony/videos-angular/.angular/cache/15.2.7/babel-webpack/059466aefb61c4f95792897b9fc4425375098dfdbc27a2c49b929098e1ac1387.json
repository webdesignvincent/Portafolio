{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { global } from './global';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class VideoService {\n  constructor(_http) {\n    this._http = _http;\n    this.url = global.url;\n  }\n  create(token = null, video) {\n    // Convertir el objeto del usuario a un json string\n    let json = JSON.stringify(video);\n    let params = 'json=' + json;\n    // Definir las cabeceras\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);\n    // Hacer peticiones ajax\n    return this._http.post(this.url + 'video/new', params, {\n      headers: headers\n    });\n  }\n  getVideos(token = null, page = null) {\n    if (!page) {\n      page = 1;\n    }\n    // Definir las cabeceras\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);\n    // Hacer peticiones ajax\n    return this._http.get(this.url + 'video/list' + page, {\n      headers: headers\n    });\n  }\n  getVideo(token = null, id) {\n    // Definir las cabeceras\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);\n    // Hacer peticiones ajax\n    return this._http.get(this.url + 'video/detail/' + id, {\n      headers: headers\n    });\n  }\n  update(token = null, video, id) {\n    // Convertir el objeto del usuario a un json string\n    let json = JSON.stringify(video);\n    let params = 'json=' + json;\n    // Definir las cabeceras\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);\n    // Hacer peticiones ajax\n    return this._http.put(this.url + 'video/edit/' + id, params, {\n      headers: headers\n    });\n  }\n  delete(token = null, id) {\n    // Definir las cabeceras\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded').set('Authorization', token);\n    // Hacer peticiones ajax\n    return this._http.delete(this.url + 'video/remove/' + id, {\n      headers: headers\n    });\n  }\n}\nVideoService.ɵfac = function VideoService_Factory(t) {\n  return new (t || VideoService)(i0.ɵɵinject(i1.HttpClient));\n};\nVideoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VideoService,\n  factory: VideoService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,MAAM,QAAQ,UAAU;;;AAGjC,OAAM,MAAOC,YAAY;EAIrBC,YACYC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAEb,IAAI,CAACC,GAAG,GAAGJ,MAAM,CAACI,GAAG;EACzB;EAEHC,MAAM,CAACC,QAAY,IAAI,EAAEC,KAAW;IAC7B;IACN,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;IAChC,IAAII,MAAM,GAAG,OAAO,GAACH,IAAI;IACnB;IACN,IAAII,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAC7EA,GAAG,CAAC,eAAe,EAAEP,KAAK,CAAC;IAChC;IACN,OAAO,IAAI,CAACH,KAAK,CAACW,IAAI,CAAC,IAAI,CAACV,GAAG,GAAC,WAAW,EAAEO,MAAM,EAAE;MAACC,OAAO,EAACA;IAAO,CAAC,CAAC;EACxE;EAEAG,SAAS,CAACT,QAAY,IAAI,EAAEU,OAAY,IAAI;IAC3C,IAAG,CAACA,IAAI,EAAC;MACRA,IAAI,GAAG,CAAC;;IAEH;IACN,IAAIJ,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAC7EA,GAAG,CAAC,eAAe,EAAEP,KAAK,CAAC;IAChC;IACN,OAAO,IAAI,CAACH,KAAK,CAACc,GAAG,CAAC,IAAI,CAACb,GAAG,GAAC,YAAY,GAACY,IAAI,EAAE;MAACJ,OAAO,EAACA;IAAO,CAAC,CAAC;EACrE;EAEGM,QAAQ,CAACZ,QAAY,IAAI,EAACa,EAAO;IAC7B;IACN,IAAIP,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAC7EA,GAAG,CAAC,eAAe,EAAEP,KAAK,CAAC;IAChC;IACN,OAAO,IAAI,CAACH,KAAK,CAACc,GAAG,CAAC,IAAI,CAACb,GAAG,GAAC,eAAe,GAACe,EAAE,EAAE;MAACP,OAAO,EAACA;IAAO,CAAC,CAAC;EACtE;EAEGQ,MAAM,CAACd,QAAY,IAAI,EAAEC,KAAW,EAACY,EAAM;IACvC;IACN,IAAIX,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;IAChC,IAAII,MAAM,GAAG,OAAO,GAACH,IAAI;IACnB;IACN,IAAII,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAC7EA,GAAG,CAAC,eAAe,EAAEP,KAAK,CAAC;IAChC;IACN,OAAO,IAAI,CAACH,KAAK,CAACkB,GAAG,CAAC,IAAI,CAACjB,GAAG,GAAC,aAAa,GAACe,EAAE,EAAER,MAAM,EAAE;MAACC,OAAO,EAACA;IAAO,CAAC,CAAC;EAC5E;EAEGU,MAAM,CAAChB,QAAY,IAAI,EAACa,EAAO;IAC3B;IACN,IAAIP,OAAO,GAAG,IAAIb,WAAW,EAAE,CAACc,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAC7EA,GAAG,CAAC,eAAe,EAAEP,KAAK,CAAC;IAChC;IACN,OAAO,IAAI,CAACH,KAAK,CAACmB,MAAM,CAAC,IAAI,CAAClB,GAAG,GAAC,eAAe,GAACe,EAAE,EAAE;MAACP,OAAO,EAACA;IAAO,CAAC,CAAC;EACzE;;AAzDYX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAsB,SAAZtB,YAAY;AAAA","names":["HttpHeaders","global","VideoService","constructor","_http","url","create","token","video","json","JSON","stringify","params","headers","set","post","getVideos","page","get","getVideo","id","update","put","delete","factory"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\Full-Stack\\Symfony\\videos-angular\\src\\app\\services\\video.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Video } from '../models/video';\r\nimport { global } from './global';\r\n\r\n@Injectable()\r\nexport class VideoService{\r\n\r\n    public url: string;\r\n\r\n    constructor(\r\n        private _http: HttpClient\r\n    ){\r\n        this.url = global.url;\r\n    }\r\n\r\n\tcreate(token:any = null, video:Video): Observable<any>{\r\n        // Convertir el objeto del usuario a un json string\r\n\t\tlet json = JSON.stringify(video);\r\n\t\tlet params = 'json='+json;\r\n        // Definir las cabeceras\r\n\t\tlet headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\r\n\t\t\t\t\t\t\t\t\t   .set('Authorization', token);\r\n        // Hacer peticiones ajax\r\n\t\treturn this._http.post(this.url+'video/new', params, {headers:headers});\r\n\t}\r\n   \r\n\tgetVideos(token:any = null, page: any = null): Observable<any>{\r\n\t\tif(!page){\r\n\t\t\tpage = 1;\r\n\t\t}\r\n        // Definir las cabeceras\r\n\t\tlet headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\r\n\t\t\t\t\t\t\t\t\t   .set('Authorization', token);\r\n        // Hacer peticiones ajax\r\n\t\treturn this._http.get(this.url+'video/list'+page, {headers:headers});\r\n\t}\r\n\r\n    getVideo(token:any = null,id: any): Observable<any>{\r\n        // Definir las cabeceras\r\n\t\tlet headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\r\n\t\t\t\t\t\t\t\t\t   .set('Authorization', token);\r\n        // Hacer peticiones ajax\r\n\t\treturn this._http.get(this.url+'video/detail/'+id, {headers:headers});\r\n\t}\r\n\r\n    update(token:any = null, video:Video,id:any): Observable<any>{\r\n        // Convertir el objeto del usuario a un json string\r\n\t\tlet json = JSON.stringify(video);\r\n\t\tlet params = 'json='+json;\r\n        // Definir las cabeceras\r\n\t\tlet headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\r\n\t\t\t\t\t\t\t\t\t   .set('Authorization', token);\r\n        // Hacer peticiones ajax\r\n\t\treturn this._http.put(this.url+'video/edit/'+id, params, {headers:headers});\r\n\t}\r\n\r\n    delete(token:any = null,id: any): Observable<any>{\r\n        // Definir las cabeceras\r\n\t\tlet headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\r\n\t\t\t\t\t\t\t\t\t   .set('Authorization', token);\r\n        // Hacer peticiones ajax\r\n\t\treturn this._http.delete(this.url+'video/remove/'+id, {headers:headers});\r\n\t}\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}