{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { global } from './global';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(_http) {\n    this._http = _http;\n    this.url = global.url;\n  }\n  register(user) {\n    // Convertir el objeto del usuario a un json string\n    let json = JSON.stringify(user);\n    let params = 'json=' + json;\n    // Definir las cabeceras\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n    // Hacer peticiones ajax\n    return this._http.post(this.url + 'register', params, {\n      headers: headers\n    });\n  }\n  signup(user, gettoken = null) {\n    if (gettoken != null) {\n      user.gettoken = 'true';\n    }\n    // Convertir el objeto del usuario a un json string\n    let json = JSON.stringify(user);\n    let params = 'json=' + json;\n    // Definir las cabeceras\n    let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n    // Hacer peticiones ajax\n    return this._http.post(this.url + 'login', params, {\n      headers: headers\n    });\n  }\n  getIdentity() {\n    let identity = JSON.parse(localStorage.getItem(\"identity\") || '{}');\n    if (identity && identity != 'undefined') {\n      this.identity = identity;\n    } else {\n      this.identity = null;\n    }\n    return this.identity;\n  }\n  getToken() {\n    let token = localStorage.getItem('token');\n    if (token && token != 'undefined') {\n      this.token = token;\n    } else {\n      this.token = null;\n    }\n    return this.token;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAQ,sBAAsB;AAG7D,SAASC,MAAM,QAAQ,UAAU;;;AAGjC,OAAM,MAAOC,WAAW;EAIpBC,YACYC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAEb,IAAI,CAACC,GAAG,GAAGJ,MAAM,CAACI,GAAG;EACzB;EAEAC,QAAQ,CAACC,IAAU;IACrB;IACM,IAAIC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;IAC/B,IAAII,MAAM,GAAG,OAAO,GAACH,IAAI;IACzB;IACA,IAAII,OAAO,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC;IACxF;IACA,OAAO,IAAI,CAACT,KAAK,CAACU,IAAI,CAAC,IAAI,CAACT,GAAG,GAAC,UAAU,EAAEM,MAAM,EAAE;MAACC,OAAO,EAACA;IAAO,CAAC,CAAC;EAC7E;EAEGG,MAAM,CAACR,IAAQ,EAAES,WAAe,IAAI;IACtC,IAAGA,QAAQ,IAAI,IAAI,EAAC;MACnBT,IAAI,CAACS,QAAQ,GAAG,MAAM;;IAEjB;IACN,IAAIR,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;IAC/B,IAAII,MAAM,GAAG,OAAO,GAACH,IAAI;IACnB;IACN,IAAII,OAAO,GAAG,IAAIZ,WAAW,EAAE,CAACa,GAAG,CAAC,cAAc,EAAE,mCAAmC,CAAC;IAClF;IACN,OAAO,IAAI,CAACT,KAAK,CAACU,IAAI,CAAC,IAAI,CAACT,GAAG,GAAC,OAAO,EAAEM,MAAM,EAAE;MAACC,OAAO,EAACA;IAAO,CAAC,CAAC;EACpE;EAEGK,WAAW;IAEb,IAAIC,QAAQ,GAAOT,IAAI,CAACU,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAG,IAAI,CAAC;IAEtE,IAAGH,QAAQ,IAAIA,QAAQ,IAAI,WAAW,EAAC;MACtC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;KACxB,MAAI;MACJ,IAAI,CAACA,QAAQ,GAAG,IAAI;;IAGrB,OAAO,IAAI,CAACA,QAAQ;EACrB;EAEAI,QAAQ;IAEP,IAAIC,KAAK,GAAOH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE7C,IAAGE,KAAK,IAAIA,KAAK,IAAI,WAAW,EAAC;MAChC,IAAI,CAACA,KAAK,GAAGA,KAAK;KAClB,MAAI;MACJ,IAAI,CAACA,KAAK,GAAG,IAAI;;IAGlB,OAAO,IAAI,CAACA,KAAK;EAClB;;AAzDYrB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;AAAA","names":["HttpHeaders","global","UserService","constructor","_http","url","register","user","json","JSON","stringify","params","headers","set","post","signup","gettoken","getIdentity","identity","parse","localStorage","getItem","getToken","token","factory"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\Full-Stack\\Symfony\\videos-angular\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../models/user';\r\nimport { global } from './global';\r\n\r\n@Injectable()\r\nexport class UserService{\r\n\r\n    public url: string;\r\n\r\n    constructor(\r\n        private _http: HttpClient\r\n    ){\r\n        this.url = global.url;\r\n    }\r\n\r\n    register(user: User): Observable<any>{\r\n\t\t// Convertir el objeto del usuario a un json string\r\n        let json = JSON.stringify(user);\r\n        let params = 'json='+json;\r\n        // Definir las cabeceras\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n        // Hacer peticiones ajax\r\n        return this._http.post(this.url+'register', params, {headers:headers});\r\n\t}\r\n\r\n    signup(user:any, gettoken:any = null): Observable<any>{\r\n\t\tif(gettoken != null){\r\n\t\t\tuser.gettoken = 'true';\r\n\t\t}\r\n        // Convertir el objeto del usuario a un json string\r\n\t\tlet json = JSON.stringify(user);\r\n\t\tlet params = 'json='+json;\r\n        // Definir las cabeceras\r\n\t\tlet headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\r\n        // Hacer peticiones ajax\r\n\t\treturn this._http.post(this.url+'login', params, {headers:headers});\r\n\t}\r\n\r\n    getIdentity(){\r\n\r\n\t\tlet identity:any = JSON.parse(localStorage.getItem(\"identity\")|| '{}');\r\n\t\t\r\n\t\tif(identity && identity != 'undefined'){\r\n\t\t\tthis.identity = identity;\r\n\t\t}else{\r\n\t\t\tthis.identity = null;\r\n\t\t}\r\n\r\n\t\treturn this.identity;\r\n\t}\r\n\r\n\tgetToken(){\r\n\t\t\r\n\t\tlet token:any = localStorage.getItem('token');\r\n\t\t\r\n\t\tif(token && token != 'undefined'){\r\n\t\t\tthis.token = token;\r\n\t\t}else{\r\n\t\t\tthis.token = null;\r\n\t\t}\r\n\r\n\t\treturn this.token;\r\n\t}\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}