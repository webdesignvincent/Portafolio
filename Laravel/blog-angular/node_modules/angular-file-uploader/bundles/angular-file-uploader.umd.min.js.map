{"version":3,"sources":["../../../projects/angular-file-uploader/src/lib/angular-file-uploader.component.ts","../../../projects/angular-file-uploader/src/lib/angular-file-uploader.module.ts"],"names":["AngularFileUploaderComponent","http","this","resetUpload","ApiResponse","EventEmitter","fileSelected","allowedFiles","notAllowedFiles","Caption","isAllowedFileSingle","progressBarShow","enableUploadBtn","uploadMsg","afterUpload","uploadStarted","currentUploads","fileNameIndex","withCredentials","autoUpload","idDate","Date","prototype","ngOnChanges","changes","config","theme","id","parseInt","toString","split","Math","floor","random","hideProgressBar","hideResetBtn","hideSelectBtn","maxSize","uploadAPI","url","method","formatsAllowed","formatsAllowedText","multiple","headers","params","responseType","replaceTexts","selectFileBtn","resetBtn","uploadBtn","dragNDropBox","attachPinBtn","afterUploadMsg_success","afterUploadMsg_error","sizeLimit","Object","assign","currentValue","resetFileUpload","onChange","event","emit","fileList","fileExtRegExp","type","dataTransfer","files","target","srcElement","i","length","currentFileExt","exec","name","toLowerCase","isFormatValid","includes","isSizeValid","size","push","fileName","fileSize","convertSize","errorMsg","uploadFiles","uploadPercent","value","_this","isError","formData","FormData","forEach","file","append","request","toUpperCase","body","reportProgress","observe","subscribe","HttpEventType","UploadProgress","loaded","total","round","Response","status","uploadMsgText","uploadMsgClass","handleErrors","error","removeFile","sf_na","splice","toFixed","attachpinOnclick","element","document","getElementById","click","drop","stopPropagation","preventDefault","allowDrop","dropEffect","Component","args","selector","template","HttpClient","decorators","SkipSelf","Input","Output","NgModule","imports","CommonModule","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n} from '@angular/core';\nimport {\n  ReplaceTexts,\n  AngularFileUploaderConfig,\n  UploadInfo,\n  UploadApi,\n} from './angular-file-uploader.types';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpEventType,\n} from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'angular-file-uploader',\n  templateUrl: './angular-file-uploader.component.html',\n  styleUrls: ['./angular-file-uploader.component.css'],\n})\nexport class AngularFileUploaderComponent implements OnChanges {\n  // Inputs\n  @Input()\n  config: AngularFileUploaderConfig;\n\n  @Input()\n  resetUpload = false;\n\n  // Outputs\n  @Output()\n  ApiResponse = new EventEmitter();\n\n  @Output()\n  fileSelected: EventEmitter<UploadInfo[]> = new EventEmitter<UploadInfo[]>();\n\n  // Properties\n  theme: string;\n  id: number;\n  hideProgressBar: boolean;\n  maxSize: number;\n  uploadAPI: string;\n  method: string;\n  formatsAllowed: string;\n  formatsAllowedText: string;\n  multiple: boolean;\n  headers: HttpHeaders | { [header: string]: string | string[] };\n  params: HttpParams | { [param: string]: string | string[] };\n  responseType: 'json' | 'arraybuffer' | 'blob' | 'text';\n  hideResetBtn: boolean;\n  hideSelectBtn: boolean;\n  allowedFiles: File[] = [];\n  notAllowedFiles: {\n    fileName: string;\n    fileSize: string;\n    errorMsg: string;\n  }[] = [];\n  Caption: string[] = [];\n  isAllowedFileSingle = true;\n  progressBarShow = false;\n  enableUploadBtn = false;\n  uploadMsg = false;\n  afterUpload = false;\n  uploadStarted = false;\n  uploadMsgText: string;\n  uploadMsgClass: string;\n  uploadPercent: number;\n  replaceTexts: ReplaceTexts;\n  currentUploads: any[] = [];\n  fileNameIndex = true;\n  withCredentials = false;\n  autoUpload = false;\n\n  private idDate: number = +new Date();\n\n  constructor(@SkipSelf() private http: HttpClient) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Track changes in Configuration and see if user has even provided Configuration.\n    if (changes.config && this.config) {\n      // Assign User Configurations to Library Properties.\n      this.theme = this.config.theme || '';\n      this.id =\n        this.config.id ||\n        parseInt((this.idDate / 10000).toString().split('.')[1], 10) +\n          Math.floor(Math.random() * 20) * 10000;\n      this.hideProgressBar = this.config.hideProgressBar || false;\n      this.hideResetBtn = this.config.hideResetBtn || false;\n      this.hideSelectBtn = this.config.hideSelectBtn || false;\n      this.maxSize = (this.config.maxSize || 20) * 1024000; // mb to bytes.\n      this.uploadAPI = this.config.uploadAPI.url;\n      this.method = this.config.uploadAPI.method || 'POST';\n      this.formatsAllowed = this.config.formatsAllowed || '*';\n      this.formatsAllowedText =\n        this.formatsAllowed === '*' ? '' : '(' + this.formatsAllowed + ')';\n      this.multiple = this.config.multiple || false;\n      this.headers = this.config.uploadAPI.headers || {};\n      this.params = this.config.uploadAPI.params || {};\n      this.responseType = this.config.uploadAPI.responseType || 'json';\n      this.withCredentials = this.config.uploadAPI.withCredentials || false;\n      this.fileNameIndex = this.config.fileNameIndex === false ? false : true;\n      this.autoUpload = this.config.autoUpload || false;\n\n      this.replaceTexts = {\n        selectFileBtn: this.multiple ? 'Select Files' : 'Select File',\n        resetBtn: 'Reset',\n        uploadBtn: 'Upload',\n        dragNDropBox: 'Drag N Drop',\n        attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',\n        afterUploadMsg_success: 'Successfully Uploaded !',\n        afterUploadMsg_error: 'Upload Failed !',\n        sizeLimit: 'Size Limit',\n      }; // default replaceText.\n      if (this.config.replaceTexts) {\n        // updated replaceText if user has provided any.\n        this.replaceTexts = {\n          ...this.replaceTexts,\n          ...this.config.replaceTexts,\n        };\n      }\n    }\n\n    // Reset when resetUpload value changes from false to true.\n    if (changes.resetUpload) {\n      if (changes.resetUpload.currentValue === true) {\n        this.resetFileUpload();\n      }\n    }\n  }\n\n  // Reset following properties.\n  resetFileUpload() {\n    this.allowedFiles = [];\n    this.Caption = [];\n    this.notAllowedFiles = [];\n    this.uploadMsg = false;\n    this.enableUploadBtn = false;\n  }\n\n  // When user selects files.\n  onChange(event: any) {\n    this.fileSelected.emit(event);\n    this.notAllowedFiles = [];\n    const fileExtRegExp: RegExp = /(?:\\.([^.]+))?$/;\n    let fileList: FileList;\n\n    if (this.afterUpload || !this.multiple) {\n      this.allowedFiles = [];\n      this.Caption = [];\n      this.afterUpload = false;\n    }\n\n    if (event.type === 'drop') {\n      fileList = event.dataTransfer.files;\n    } else {\n      fileList = event.target.files || event.srcElement.files;\n    }\n\n    // 'forEach' does not exist on 'filelist' that's why this good old 'for' is used.\n    for (let i = 0; i < fileList.length; i++) {\n      const currentFileExt = fileExtRegExp\n        .exec(fileList[i].name)[1]\n        .toLowerCase(); // Get file extension.\n      const isFormatValid = this.formatsAllowed.includes('*')\n        ? true\n        : this.formatsAllowed.includes(currentFileExt);\n\n      const isSizeValid = fileList[i].size <= this.maxSize;\n\n      // Check whether current file format and size is correct as specified in the configurations.\n      if (isFormatValid && isSizeValid) {\n        this.allowedFiles.push(fileList[i]);\n      } else {\n        this.notAllowedFiles.push({\n          fileName: fileList[i].name,\n          fileSize: this.convertSize(fileList[i].size),\n          errorMsg: !isFormatValid ? 'Invalid format' : 'Invalid size',\n        });\n      }\n    }\n\n    // If there's any allowedFiles.\n    if (this.allowedFiles.length > 0) {\n      this.enableUploadBtn = true;\n      // Upload the files directly if theme is attach pin (as upload btn is not there for this theme) or autoUpload is true.\n      if (this.theme === 'attachPin' || this.autoUpload) {\n        this.uploadFiles();\n      }\n    } else {\n      this.enableUploadBtn = false;\n    }\n\n    this.uploadMsg = false;\n    this.uploadStarted = false;\n    this.uploadPercent = 0;\n    event.target.value = null;\n  }\n\n  uploadFiles() {\n    this.progressBarShow = true;\n    this.uploadStarted = true;\n    this.notAllowedFiles = [];\n    let isError = false;\n    this.isAllowedFileSingle = this.allowedFiles.length <= 1;\n    const formData = new FormData();\n\n    // Add data to be sent in this request\n    this.allowedFiles.forEach((file, i) => {\n      formData.append(\n        this.Caption[i] || 'file' + (this.fileNameIndex ? i : ''),\n        this.allowedFiles[i]\n      );\n    });\n\n    /*\n    Not Working, Headers null\n    // Contruct Headers\n    const headers = new HttpHeaders();\n    for (const key of Object.keys(this.headers)) {\n      headers.append(key, this.headers[key]);\n    }\n\n    // Contruct Params\n    const params = new HttpParams();\n    for (const key of Object.keys(this.params)) {\n      params.append(key, this.params[key]);\n    } */\n\n    this.http\n      .request(this.method.toUpperCase(), this.uploadAPI, {\n        body: formData,\n        reportProgress: true,\n        observe: 'events',\n        headers: this.headers,\n        params: this.params,\n        responseType: this.responseType,\n        withCredentials: this.withCredentials,\n      })\n      .subscribe(\n        (event) => {\n          // Upload Progress\n          if (event.type === HttpEventType.UploadProgress) {\n            this.enableUploadBtn = false; // button should be disabled if process uploading\n            const currentDone = event.loaded / event.total;\n            this.uploadPercent = Math.round((event.loaded / event.total) * 100);\n          } else if (event.type === HttpEventType.Response) {\n            if (event.status === 200 || event.status === 201) {\n              // Success\n              this.progressBarShow = false;\n              this.enableUploadBtn = false;\n              this.uploadMsg = true;\n              this.afterUpload = true;\n              if (!isError) {\n                this.uploadMsgText = this.replaceTexts.afterUploadMsg_success;\n                this.uploadMsgClass = 'text-success lead';\n              }\n            } else {\n              // Failure\n              isError = true;\n              this.handleErrors();\n            }\n\n            this.ApiResponse.emit(event);\n          } else {\n            //console.log('Event Other: ', event);\n          }\n        },\n        (error) => {\n          // Failure\n          isError = true;\n          this.handleErrors();\n          this.ApiResponse.emit(error);\n        }\n      );\n  }\n\n  handleErrors() {\n    this.progressBarShow = false;\n    this.enableUploadBtn = false;\n    this.uploadMsg = true;\n    this.afterUpload = true;\n    this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;\n    this.uploadMsgClass = 'text-danger lead';\n  }\n\n  removeFile(i: any, sf_na: any) {\n    if (sf_na === 'sf') {\n      this.allowedFiles.splice(i, 1);\n      this.Caption.splice(i, 1);\n    } else {\n      this.notAllowedFiles.splice(i, 1);\n    }\n\n    if (this.allowedFiles.length === 0) {\n      this.enableUploadBtn = false;\n    }\n  }\n\n  convertSize(fileSize: number): string {\n    return fileSize < 1024000\n      ? (fileSize / 1024).toFixed(2) + ' KB'\n      : (fileSize / 1024000).toFixed(2) + ' MB';\n  }\n\n  attachpinOnclick() {\n    const element = document.getElementById('sel' + this.id);\n    if (element !== null) {\n      element.click();\n    }\n  }\n\n  drop(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    this.onChange(event);\n  }\n\n  allowDrop(event: any) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularFileUploaderComponent } from './angular-file-uploader.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n  ],\n  declarations: [AngularFileUploaderComponent],\n  exports: [AngularFileUploaderComponent]\n})\nexport class AngularFileUploaderModule { }\n"]}